[workspace]
members = ["sqlx-utils-macro"]

[workspace.package]
version = "1.1.1"
description = "Utilities for working with SQLx in a structured and efficient way, both when developing and running"
repository = "https://github.com/retrokiller543/sqlx_utils"
authors = ["Emil Sch√ºtt <emil.schutt@gmail.com>"]
readme = "README.md"
license = "MIT"
edition = "2024"

[package]
name = "sqlx-utils"
version = "1.1.1"
edition.workspace = true
description.workspace = true
repository.workspace = true
authors.workspace = true
readme.workspace = true
license.workspace = true

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[package.metadata.docs.rs.features]

# Feature documentation that will appear on the docs.rs Features page
# Database features
any = { description = "Works with any SQLx-supported database via dynamic typing. This is the default." }
postgres = { description = "PostgreSQL specific optimizations and features. Incompatible with other database features." }
mysql = { description = "MySQL specific features and optimizations. Incompatible with other database features." }
sqlite = { description = "SQLite specific support and optimizations. Incompatible with other database features." }

# Development and behavior features
filter_debug_impl = { description = "Automatically implements `Debug` for all filter structs generated by the `sql_filter!` macro. Makes debugging easier but may increase binary size. This will also add so tracing::instument will log filters, if this is not wanted you can disable this feature." }
log_err = { description = "Adds error logging to the tracing instrumentation for all repository operations. When enabled, errors will be included in the tracing spans." }
insert_duplicate = { description = "Disables the check that prevents inserting a record with an existing ID. By default, the library checks in debug mode to prevent this and its up to you to ensure it does not happen in release mode." }
nightly = { description = "Enables nightly compiler features for better error messages in macros. Requires a nightly compiler." }
try-parse = { description = "Experimental feature that attempts to continue parsing SQL filters even when errors are encountered. Helps identify multiple issues at once." }
filter-blanket-impl = { description = "Automatically implements `FilterRepositoryExt` trait for any repository that implements `FilterRepository`. Simplifies usage but may cause type inference issues in some cases. A result of this feature being enabled is that filter operations on repositories are not as strict with its types as it will be implemented for all filters on all repositories, making it possible to use filters meant from one repository on another repository." }

[dependencies]
paste = "1.0.15"
sqlx = "0.8.3"
sqlx-utils-macro = { path = "./sqlx-utils-macro", version = "1.1.1", default-features = false }
thiserror = "2.0.12"
tokio = { version = "1.43.0", features = ["full"] }
futures = "0.3.31"
tracing = "0.1.41"
cfg-if = "1.0.0"
async-trait = "0.1.87"
parking_lot = { version = "0.12.3", features = ["send_guard", "arc_lock"] }

[dev-dependencies]
trybuild = "1.0"

[features]
#default = ["any", "filter_debug_impl", "nightly"]
default = ["any", "filter_debug_impl"]
sqlite = ["sqlx-utils-macro/sqlite", "sqlx/sqlite"]
any = ["sqlx-utils-macro/any", "sqlx/any"]
postgres = ["sqlx-utils-macro/postgres", "sqlx/postgres"]
mysql = ["sqlx-utils-macro/mysql", "sqlx/mysql"]
filter_debug_impl = ["sqlx-utils-macro/filter_debug_impl"]
log_err = []
insert_duplicate = []
nightly = ["sqlx-utils-macro/nightly"]
try-parse = ["sqlx-utils-macro/try-parse"]
filter-blanket-impl = ["sqlx-utils-macro/filter-blanket-impl"]
